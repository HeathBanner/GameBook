{"ast":null,"code":"import _defineProperty from \"/Users/God/Desktop/github/SocialMedia/gamebook/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/God/Desktop/github/SocialMedia/gamebook/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/God/Desktop/github/SocialMedia/gamebook/client/src/components/Login/LoginForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\nimport { AuthContext } from '../../contexts/AuthContext';\nimport SuccessNotification from '../Notifications/SuccessNotification';\nimport ErrorNotification from '../Notifications/ErrorNotification';\nimport WarningNotification from '../Notifications/WarningNotification';\nconst initInfo = {\n  email: '',\n  password: ''\n};\nconst initNotifications = {\n  open: false,\n  message: ''\n};\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    padding: 15,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexWrap: 'wrap'\n  },\n  inputs: {\n    width: '100%',\n    marginTop: 20\n  },\n  button: {\n    width: '100%',\n    marginTop: 20,\n    padding: 15,\n    background: 'rgb(0, 0, 0, 0.1)',\n    transition: 'all 0.4s ease',\n    '&:hover': {\n      background: 'rgb(0, 0, 0, 0.3)',\n      transform: 'scale(1.03)'\n    }\n  },\n  signup: {\n    width: '100%',\n    marginTop: 20,\n    padding: 15,\n    background: 'rgb(11, 212, 185, 0.1)',\n    transition: 'all 0.4s ease',\n    '&:hover': {\n      background: 'rgb(0, 0, 0, 0.3)',\n      transform: 'scale(1.03)'\n    }\n  }\n}));\n\nconst LoginForm = () => {\n  const auth = useContext(AuthContext);\n  const classes = useStyles();\n\n  const _useState = useState(_objectSpread({}, initInfo)),\n        _useState2 = _slicedToArray(_useState, 2),\n        info = _useState2[0],\n        setInfo = _useState2[1];\n\n  const _useState3 = useState(_objectSpread({}, initNotifications)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        success = _useState4[0],\n        setSuccess = _useState4[1];\n\n  const _useState5 = useState(_objectSpread({}, initNotifications)),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const _useState7 = useState(_objectSpread({}, initNotifications)),\n        _useState8 = _slicedToArray(_useState7, 2),\n        warning = _useState8[0],\n        setWarning = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        toLogin = _useState10[0],\n        setToLogin = _useState10[1];\n\n  const closeError = () => {\n    setError(_objectSpread({}, initNotifications));\n  };\n\n  const closeSuccess = () => {\n    setSuccess(_objectSpread({}, initNotifications));\n  };\n\n  const closeWarning = () => {\n    setWarning(_objectSpread({}, initNotifications));\n  };\n\n  const preSubmit = () => {\n    switch (true) {\n      case info.email.length < 2:\n        return setWarning({\n          open: true,\n          message: 'Incorrect email!'\n        });\n\n      case info.password.length < 6:\n        return setWarning({\n          open: true,\n          message: 'Incorrect password!'\n        });\n\n      default:\n        return handleSubmit();\n    }\n  };\n\n  const handleSubmit = () => {\n    const email = info.email,\n          password = info.password;\n    fetch('/api/users/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(result => {\n      if (result.error) {\n        return setError({\n          open: true,\n          message: result.message\n        });\n      }\n\n      auth.handleLogin(result.user, result.token);\n      setInfo(_objectSpread({}, initInfo));\n      setSuccess({\n        open: true,\n        message: 'Login Successful!'\n      });\n    }).catch(() => {\n      setError({\n        open: true,\n        message: 'Something went wrong!'\n      });\n    });\n  };\n\n  const handleRedirect = () => {\n    setToLogin(true);\n  };\n\n  if (toLogin) {\n    return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Login\"), React.createElement(TextField, {\n    className: classes.inputs,\n    type: \"email\",\n    variant: \"outlined\",\n    label: \"Email\",\n    value: info.email,\n    onChange: e => setInfo(_objectSpread({}, info, {\n      email: e.target.value\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    className: classes.inputs,\n    type: \"password\",\n    variant: \"outlined\",\n    label: \"Password\",\n    value: info.password,\n    onChange: e => setInfo(_objectSpread({}, info, {\n      password: e.target.value\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.button,\n    onClick: preSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(Button, {\n    className: classes.signup,\n    onClick: preSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(Link, {\n    style: {\n      textDecoration: 'none',\n      color: 'inherit'\n    },\n    to: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Sign Up\"))), React.createElement(SuccessNotification, {\n    success: success,\n    closeSuccess: closeSuccess,\n    toLogin: handleRedirect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(ErrorNotification, {\n    error: error,\n    closeError: closeError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }), React.createElement(WarningNotification, {\n    warning: warning,\n    closeWarning: closeWarning,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }));\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/God/Desktop/github/SocialMedia/gamebook/client/src/components/Login/LoginForm.js"],"names":["React","useContext","useState","Redirect","Link","makeStyles","TextField","Button","Typography","Paper","AuthContext","SuccessNotification","ErrorNotification","WarningNotification","initInfo","email","password","initNotifications","open","message","useStyles","theme","paper","padding","display","justifyContent","alignItems","flexWrap","inputs","width","marginTop","button","background","transition","transform","signup","LoginForm","auth","classes","info","setInfo","success","setSuccess","error","setError","warning","setWarning","toLogin","setToLogin","closeError","closeSuccess","closeWarning","preSubmit","length","handleSubmit","fetch","method","body","JSON","stringify","headers","then","res","json","result","handleLogin","user","token","catch","handleRedirect","e","target","value","textDecoration","color"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n    TextField,\n    Button,\n    Typography,\n    Paper,\n} from '@material-ui/core';\n\nimport { AuthContext } from '../../contexts/AuthContext';\n\nimport SuccessNotification from '../Notifications/SuccessNotification';\nimport ErrorNotification from '../Notifications/ErrorNotification';\nimport WarningNotification from '../Notifications/WarningNotification';\n\nconst initInfo = {\n    email: '',\n    password: '',\n};\n\nconst initNotifications = {\n    open: false,\n    message: '',\n};\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: 15,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n    },\n    inputs: {\n        width: '100%',\n        marginTop: 20,\n    },\n    button: {\n        width: '100%',\n        marginTop: 20,\n        padding: 15,\n        background: 'rgb(0, 0, 0, 0.1)',\n        transition: 'all 0.4s ease',\n        '&:hover': {\n            background: 'rgb(0, 0, 0, 0.3)',\n            transform: 'scale(1.03)',\n        },\n    },\n    signup: {\n        width: '100%',\n        marginTop: 20,\n        padding: 15,\n        background: 'rgb(11, 212, 185, 0.1)',\n        transition: 'all 0.4s ease',\n        '&:hover': {\n            background: 'rgb(0, 0, 0, 0.3)',\n            transform: 'scale(1.03)',\n        },\n    },\n}));\n\nconst LoginForm = () => {\n\n    const auth = useContext(AuthContext);\n    const classes = useStyles();\n\n    const [info, setInfo] = useState({ ...initInfo });\n    const [success, setSuccess] = useState({ ...initNotifications });\n    const [error, setError] = useState({ ...initNotifications });\n    const [warning, setWarning] = useState({ ...initNotifications });\n    const [toLogin, setToLogin] = useState(false);\n\n    const closeError = () => { setError({ ...initNotifications }); };\n    const closeSuccess = () => { setSuccess({ ...initNotifications }); };\n    const closeWarning = () => { setWarning({ ...initNotifications }); };\n\n    const preSubmit = () => {\n        switch (true) {\n            case info.email.length < 2:\n                return setWarning({\n                    open: true,\n                    message: 'Incorrect email!',\n                });\n            case info.password.length < 6:\n                return setWarning({\n                    open: true,\n                    message: 'Incorrect password!',\n                });\n            default:\n                return handleSubmit();\n        }\n    };\n\n    const handleSubmit = () => {\n        const { email, password } = info;\n        fetch('/api/users/login', {\n            method: 'POST',\n            body: JSON.stringify({ email, password }),\n            headers: { 'Content-Type': 'application/json' },\n        })\n            .then(res => res.json())\n            .then((result) => {\n                if (result.error) {\n                    return setError({ open: true, message: result.message });\n                }\n                auth.handleLogin(result.user, result.token);\n                setInfo({ ...initInfo });\n                setSuccess({\n                    open: true,\n                    message: 'Login Successful!',\n                });\n            })\n            .catch(() => { setError({ open: true, message: 'Something went wrong!' }); });\n        };\n\n    const handleRedirect = () => { setToLogin(true); };\n\n    if (toLogin) { return <Redirect to=\"/\" />; }\n    return (\n        <Paper className={classes.paper}>\n\n            <Typography variant=\"h4\">\n                Login\n            </Typography>\n\n            <TextField\n                className={classes.inputs}\n                type=\"email\"\n                variant=\"outlined\"\n                label=\"Email\"\n                value={info.email}\n                onChange={(e) => setInfo({ ...info, email: e.target.value})}\n            />\n\n            <TextField\n                className={classes.inputs}\n                type=\"password\"\n                variant=\"outlined\"\n                label=\"Password\"\n                value={info.password}\n                onChange={(e) => setInfo({ ...info, password: e.target.value})}\n            />\n\n            <Button\n                className={classes.button}\n                onClick={preSubmit}\n            >\n                <Typography>\n                    Submit\n                </Typography>\n            </Button>\n\n            <Button\n                className={classes.signup}\n                onClick={preSubmit}\n            >\n                <Link\n                    style={{\n                        textDecoration: 'none',\n                        color: 'inherit',\n                    }}\n                    to=\"/register\"\n                >\n                    <Typography>\n                        Sign Up\n                    </Typography>\n                </Link>\n            </Button>\n\n            <SuccessNotification\n                success={success}\n                closeSuccess={closeSuccess}\n                toLogin={handleRedirect}\n            />\n            <ErrorNotification\n                error={error}\n                closeError={closeError}\n            />\n            <WarningNotification\n                warning={warning}\n                closeWarning={closeWarning}\n            />\n\n        </Paper>\n    );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}